/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import com.thoughtworks.go.build.AdoptOpenJDKUrlHelper
import com.thoughtworks.go.build.DownloadFile
import com.thoughtworks.go.build.WindowsPackagingTask
import org.apache.commons.codec.digest.DigestUtils
import org.apache.tools.ant.filters.FixCrLfFilter

private File destFile(String url) {
  new File(gradle.gradleUserHomeDir, "download-cache/${DigestUtils.md5Hex(url)}/${new File(new URL(url).path).name}")
}

task downloadWindowsJreChecksum(type: DownloadFile) {
  def srcUrl = AdoptOpenJDKUrlHelper.sha256sumURL(
    com.thoughtworks.go.build.OperatingSystem.windows,
    project.versions.adoptOpenjdk.featureVersion,
    project.versions.adoptOpenjdk.interimVersion,
    project.versions.adoptOpenjdk.updateVersion,
    project.versions.adoptOpenjdk.buildVersion
  )
  src srcUrl
  dest destFile(srcUrl)
}

task downloadWindowsJre(type: DownloadFile) {
  dependsOn downloadWindowsJreChecksum
  def srcUrl = AdoptOpenJDKUrlHelper.downloadURL(
    com.thoughtworks.go.build.OperatingSystem.windows,
    project.versions.adoptOpenjdk.featureVersion,
    project.versions.adoptOpenjdk.interimVersion,
    project.versions.adoptOpenjdk.updateVersion,
    project.versions.adoptOpenjdk.buildVersion
  )
  src srcUrl
  dest destFile(srcUrl)
  checksum = { downloadWindowsJreChecksum.outputs.files.singleFile.getText("utf-8").trim().split(" ").first() }
}

task agentWindows64bitExe(type: WindowsPackagingTask) {
  dependsOn configurations.agentBootstrapperJar
  dependsOn downloadWindowsJre

  group project.name
  description 'Build the go-agent windows installer'

  packageName 'go-agent'
  version rootProject.goVersion
  distVersion rootProject.distVersion

  openJdkZipFile downloadWindowsJre.outputs.files.singleFile

  beforePackage {
    copyAgentSpecificFiles(versionedDir(), buildRoot(), flavour())
  }
}

task serverWindows64bitExe(type: WindowsPackagingTask) {
  dependsOn configurations.serverJar
  dependsOn downloadWindowsJre
  group project.name
  description 'Build the go-server windows installer'

  packageName 'go-server'
  version rootProject.goVersion
  distVersion rootProject.distVersion

  openJdkZipFile downloadWindowsJre.outputs.files.singleFile

  beforePackage {
    copyServerSpecificFiles(versionedDir(), buildRoot(), flavour())
  }
}

def copyAgentSpecificFiles(versionedDir, buildRoot, flavour) {
  copyCommonFiles(versionedDir, buildRoot, flavour)
  project.copy { from('go-agent/win/ServerURL.ini') into(buildRoot) }

  project.copy {
    from(configurations.agentBootstrapperJar)
    into(versionedDir)
    rename "(.*)-${project.version}.(.*)", '$1.$2'
  }
  project.copy { from('go-agent/release/agent.cmd') into(versionedDir) }
  project.copy { from('go-agent/release/start-agent.bat') into(versionedDir) }
  project.copy { from('go-agent/release/stop-agent.bat') into(versionedDir) }
  project.copy { from('go-agent/release/README.md') into(versionedDir) }
  project.copy { from('go-agent/win/config') into("${versionedDir}/config") }
  project.file("${versionedDir}/tmp").mkdirs()
}

private void copyServerSpecificFiles(versionedDir, buildRoot, flavour) {
  copyCommonFiles(versionedDir, buildRoot, flavour)

  project.copy {
    from(configurations.serverJar)
    into(versionedDir)
    rename "(.*)-${project.version}.(.*)", 'go.jar'
  }

  project.copy { from('go-server/release/server.cmd') into(versionedDir) }
  project.copy { from('go-server/release/start-server.bat') into(versionedDir) }
  project.copy { from('go-server/release/stop-server.bat') into(versionedDir) }
  project.copy { from('go-server/win/config') into("${versionedDir}/config") }
  project.file("${versionedDir}/tmp").mkdirs()
}

private void copyCommonFiles(versionedDir, buildRoot, flavour) {
  project.copy {
    from project.rootProject.file('LICENSE')
    into(versionedDir)
  }

  project.copy {
    from project.rootProject.file('LICENSE')
    into(versionedDir)
    filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.DOS)
    rename "LICENSE", "LICENSE.DOS"
  }

  project.copy { from('windows-shared/JavaHome.ini') into(buildRoot) }
  project.copy { from("windows-shared/tanuki/${flavour}/cruisewrapper.exe") into(versionedDir) }
  project.copy { from("windows-shared/tanuki/lib") into("${versionedDir}/lib") }
  // create an empty log dir so tanuki wrapper can write to the logs
  project.file("${versionedDir}/logs").mkdirs()
}


assemble.dependsOn(":installers:agentWindows64bitExe", ":installers:serverWindows64bitExe")
