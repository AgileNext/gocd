/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import m from "mithril";
import _ from "lodash";

export const StagesInstanceWidget = {
  oninit(vnode) {
    const self = vnode.state;
    const operationMessages = vnode.attrs.operationMessages;

    self.triggerStage = (stage) => {
      stage.trigger().then((res) => {
        operationMessages.success(vnode.attrs.pipelineName, res.message);
        vnode.attrs.invalidateEtag();
      }, (res) => {
        operationMessages.failure(vnode.attrs.pipelineName, res.responseJSON.message);
      });
    };
  },

  view: (vnode) => {
    const stages = vnode.attrs.stages;
    const stageInstance = _.map(stages, (stage, index) => {
      const isPreviousStageInProgress = stages[index-1] ? !stages[index-1].isCompleted() : false;
      let stageStatus = `${stage.name} (${stage.status})`;
      if (stage.isCancelled()) {
        stageStatus = `${stage.name} (cancelled by: ${stage.cancelledBy})`;
      }

      let manualGate;
      if (stage.isManual()) {
        let isTriggerDisabled = isPreviousStageInProgress;
        if(stage.isBuildingOrCompleted() || !vnode.attrs.pipeline.canOperate) {
          isTriggerDisabled = true;
        }

        manualGate = <span onclick={isTriggerDisabled ? undefined : vnode.state.triggerStage.bind(vnode.state, stage)}
                           title={getHelpText(stage, stages[index - 1], vnode.attrs.pipeline)}
                           class={`manual_gate ${isTriggerDisabled ? "disabled" : ""}`} />;
      }

      if (stage.isBuildingOrCompleted()) {
        return [ manualGate,
          <a href={stage.stageDetailTabPath}
             className={`pipeline_stage ${stage.status.toLowerCase()}`}
             title={stageStatus} aria-label={stageStatus}>
          </a>];
      }

      return [
        manualGate,
        <span className={`pipeline_stage ${stage.status.toLowerCase()}`}
              title={stageStatus} aria-label={stageStatus}/>];
    });

    return (
      <ul class="pipeline_stages">
        {stageInstance}
      </ul>
    );
  }
};

function getHelpText(stage, previousStage, pipeline) {
  let helpText;
  if(stage.isManual()) {
    helpText = `Awaiting approval. Waiting for users with the operate permission to schedule '${stage.name}' stage`;
  }

  if(stage.isBuildingOrCompleted()) {
    helpText = `Approved by '${stage.approvedBy}'.`;
  }

  if(previousStage && !previousStage.isCompleted()) {
    helpText = `Can not schedule next stage - Either the previous stage hasn't run or is in progress.`;
  }

  if(!pipeline.canOperate) {
    helpText = `Can not schedule next stage - You don't have permissions to schedule the next stage.`;
  }

  return helpText;
}

