/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require("mithril");
const _ = require("lodash");
const f = require("helpers/form_helper");

const ConfigReposList = {
  view(vnode) {
    const vm = vnode.attrs.vm;

    return <section class="repo-list">
      <h1>Config Repos</h1>
      <AddRepo vm={vm}/>
      <ServerErrors msg={vm.errors().join("; ")} />
      <ul>
      {
        vm.repos().map((repo) => {
          return <ConfigRepo vm={vm} repo={vm.editMode(repo) ? vm.editModel() : repo} />;
        })
      }
      </ul>
    </section>;
  }
};

const AddRepo = {
  view(vnode) {
    const vm = vnode.attrs.vm;

    if (vm.pluginChoices().length === 0) {
      return <div class="add-repo-actions loading">Gathering Plugins&hellip;</div>;
    }

    if (vm.addMode()) {
      return <div class="add-repo-actions">
        <AddForm vm={vm.addModel()} availablePlugins={vm.pluginChoices()} />
        <button onclick={() => vm.exitAddMode()}>Cancel</button>
        <button onclick={() => vm.createRepo(vm.addModel()).then(() => vm.exitAddMode())}>Save</button>
      </div>;
    } else {
      return <div class="add-repo-actions">
        <f.select model={vm} attrName="typeToAdd" items={vm.availMaterials} />
        <button onclick={() => vm.enterAddMode()}>Add Repo</button>
      </div>;
    }
  }
};

const AddForm = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const availablePlugins = vnode.attrs.availablePlugins;

    return <div class="add-config-repo-form">
      <f.select validate={true} label="Choose a plugin" model={vm} attrName="pluginId" items={availablePlugins} />
      <f.input validate={true} label="Config Repo ID" model={vm} attrName="id"/>
      <MaterialAttributes model={vm} isEdit={true} />
      <ServerErrors msg={vm.serverErrors()} />
    </div>;
  }
};

const ConfigRepo = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const repo = vnode.attrs.repo;
    const isEdit = vm.editMode(repo);

    return <li>
      <h3>{repo.type()} repo: {repo.id()}</h3>
      <h5>Plugin: {repo.pluginId()}</h5>
      <MaterialAttributes model={repo} isEdit={isEdit} />
      <ServerErrors msg={repo.serverErrors()} />
      <ActionBar vm={vm} repo={repo} isEdit={isEdit} />
      <Revision repo={repo} />
    </li>;
  }
};

const ActionBar = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const repo = vnode.attrs.repo;
    const isEdit = vnode.attrs.isEdit;

    if (isEdit) {
      return m("div", {class: "config-repo-actions"}, [<button onclick={() => vm.exitEditMode()}>Cancel</button>, <button onclick={() => vm.updateRepo(repo).then(() => vm.exitEditMode())}>Save</button>]);
    } else {
      return m("div", {class: "config-repo-actions"}, [<button onclick={() => vm.enterEditMode(repo)}>Edit</button>, <button onclick={() => vm.removeRepo(repo)}>Delete</button>]);
    }
  }
};

const ServerErrors = {
  view(vnode) {
    return <div class="server-error-messages">{vnode.attrs.msg}</div>;
  }
};

const MaterialAttributes = {
  view(vnode) {
    const vm = vnode.attrs.model;
    const material = vm.attributes();
    const isEdit = vnode.attrs.isEdit;

    if (isEdit) {
      return <div>{
        _.map(material.keys, (k) => <Field vm={vm} model={material} attrName={k} />)
      }</div>;
    }

    return <table>
      {_.map(material.keys, (k) => <tr><td>{k}</td><td>{material[k]()}</td></tr>)}
    </table>;
  }
};

const Field = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const model = vnode.attrs.model;
    const k = vnode.attrs.attrName;
    const field = model[k];
    const options = {model, attrName: k, label: field.opts("display"), validate: true};

    if (field.opts("readOnly")) { options.disabled = true; }
    if ("url" === k) {
      options.contentAfter = [<CheckConnection vm={vm}/>];
    }

    switch (field.opts("type")) {
      /* eslint-disable no-fallthrough */
      case "boolean":
        return <f.checkbox {...options} />;
      case "secret":
        options.type = "password";
      case "text":
      default:
        return <f.input {...options} />;
      /* eslint-enable no-fallthrough */
    }
  }
};

const Revision = {
  oninit(vnode) {
    vnode.state.revision = null;
    vnode.state.result = null;
  },

  view(vnode) {
    const repo = vnode.attrs.repo;
    const revision = vnode.state.revision;
    const result = vnode.state.result;
    const success = (data) => {
      vnode.state.revision = "Last seen revision " + data.revision;
      if (data.success) { vnode.state.result = "Revision successfully parsed"; }
      if (data.error) { vnode.state.result = data.error; }
    };
    const failure = (errorMessage) => { vnode.state.revision = errorMessage; };
    const handler = () => {
      vnode.state.revision = null;
      repo.getRevision().then(success, failure);
    };

    return <section>
      <div>{revision}</div>
      <div>{result}</div>
      <button onclick={handler}>Show Latest Revision</button>
      <button onclick={() => { repo.triggerUpdate(); }}>Force Update</button>
    </section>
  }
}

const CheckConnection = {
  oninit(vnode) {
    vnode.state.result = null;
  },

  view(vnode) {
    const vm = vnode.attrs.vm;
    const success = (data) => { vnode.state.result = data.message; };
    const failure = (errorMessage) => { vnode.state.result = errorMessage; };
    const handler = () => {
      vnode.state.result = null;
      vm.testConnection().then(success, failure);
    };
    return <div class="connection-test">
      <button onclick={handler}>Check Connection</button>
      <span class="connection-result">{vnode.state.result}</span>
    </div>;
  }
};

module.exports = ConfigReposList;
